<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreLib\Tests;

use Core\Types\CallbackCatcher;
use SwaggerPetstoreLib\Authentication\ApiKeyCredentialsBuilder;
use SwaggerPetstoreLib\Authentication\HttpBasicCredentialsBuilder;
use SwaggerPetstoreLib\Authentication\PetstoreAuthCredentialsBuilder;
use SwaggerPetstoreLib\SwaggerPetstoreClient;
use SwaggerPetstoreLib\SwaggerPetstoreClientBuilder;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): SwaggerPetstoreClient
    {
        $clientBuilder = SwaggerPetstoreClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        return $clientBuilder->httpCallback($httpCallback)->build();
    }

    public static function addTestConfiguration(SwaggerPetstoreClientBuilder $builder): SwaggerPetstoreClientBuilder
    {
        return $builder->httpBasicCredentials(HttpBasicCredentialsBuilder::init('test', 'testPassword'));
    }

    public static function addConfigurationFromEnvironment(
        SwaggerPetstoreClientBuilder $builder
    ): SwaggerPetstoreClientBuilder {
        $timeout = getenv('SWAGGER_PETSTORE_LIB_TIMEOUT');
        $numberOfRetries = getenv('SWAGGER_PETSTORE_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv('SWAGGER_PETSTORE_LIB_MAXIMUM_RETRY_WAIT_TIME');
        $testHeader = getenv('SWAGGER_PETSTORE_LIB_TEST_HEADER');
        $environment = getenv('SWAGGER_PETSTORE_LIB_ENVIRONMENT');
        $apiKey = getenv('SWAGGER_PETSTORE_LIB_API_KEY');
        $username = getenv('SWAGGER_PETSTORE_LIB_USERNAME');
        $passwprd = getenv('SWAGGER_PETSTORE_LIB_PASSWPRD');
        $oAuthClientId = getenv('SWAGGER_PETSTORE_LIB_O_AUTH_CLIENT_ID');
        $oAuthRedirectUri = getenv('SWAGGER_PETSTORE_LIB_O_AUTH_REDIRECT_URI');

        if (!empty($timeout) && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if (!empty($numberOfRetries) && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if (!empty($maximumRetryWaitTime) && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if (!empty($testHeader)) {
            $builder->testHeader($testHeader);
        }

        if (!empty($environment)) {
            $builder->environment($environment);
        }

        if (!empty($apiKey)) {
            $builder->apiKeyCredentials(ApiKeyCredentialsBuilder::init($apiKey));
        }

        if (!empty($username) && !empty($passwprd)) {
            $builder->httpBasicCredentials(HttpBasicCredentialsBuilder::init($username, $passwprd));
        }

        if (!empty($oAuthClientId) && !empty($oAuthRedirectUri)) {
            $builder->petstoreAuthCredentials(
                PetstoreAuthCredentialsBuilder::init($oAuthClientId, $oAuthRedirectUri)
            );
        }

        return $builder;
    }
}
